#INSTALLATION DE LA CONNEXION OPENID. UBUNTU 20.04 A JOUR.

1- Téléchargement et installation d'apache2:
   > sudo apt-get install apache2

2- Activation du firewall Ubuntu:
   > sudo ufw enable

3- Voir la liste des applications avec profil firewall (Apache doit y être):
   > sudo ufw app list

4- Activation du firewall pour Apache sur http et https:
   > sudo ufw allow "Apache Full"

5- Activer le module ssl Apache:
   > sudo a2enmod ssl
   /* Pas la peine de redémarrer apache2 pour le moment. La configuration est pas terminée. */

6- Installer le compilateur GCC:
   > sudo apt-get install gcc

7- Installer Git:
   > sudo apt-get install git

8- Installer le module mod_oauth_openic dans un répertoire "compilation" par exemple

	* Lancer la commande:
	   > git clone https://github.com/zmartzone/mod_auth_openidc.git
	
	* Se deplacer dans le répertoire mod_auth_openidc
	 
	* Lancer l'installation du module:
	   > sudo /.autogen.sh
	 	
		autoreconf erreur ? > sudo apt-get install autoconf
  
	 * Lancer ./configure (Relancer ./configure apres chaque erreur et installation)
		apsx2 erreur ? > sudo apt install apache2-dev
		libcurl erreur ? > sudo apt-get install libcurl4-openssl-dev
		openssl erreur ? > sudo apt-get install libssl-dev
		jansson erreur ? > sudo apt-get install libjansson-dev
		cjose erreur ? > sudo apt-get install libcjose-dev
		libpcre erreur ? > sudo apt-get install libpcre3-dev

	* Compilation
		make

	* Installation dans /usr/lib/apache2/modules
		sudo make install

9- Configuration du serveur https

	* Dans /var/www créer un repertoire protected 
		> sudo mkdir protected

	* Dans le répertoire protected, créer un fichier index.html avec un a href vers /openid.
          Ce lien servira de référence pour l'appel de l'OpenId Provider (OP) qui sera référencé dans <Location /openid>
	  du fichier de configuration du virtualhost 443 que l'on va créer juste après.


	* Dans /etc/apache2/sites-available faire une copie de default-ssl.conf
	 	 > sudo cp default-ssl.conf openid-ssl.conf
		/* Le nom du fichier de configuration [openid-ssl.conf] ici est arbitraire. */ 	

	
10- Paramétrage de openid-ssl.conf
 
	* Se déplacer dans /etc/apache2/sites-available
	
	* Editer le fichier openid-ssl.conf
	 
 	 - Sous  <VirtualHost *:443> renseignez ces paramètres:

		ServerName localhost
        	ServerAdmin webmaster@localhost
        	LoadModule auth_openidc_module /usr/lib/apache2/modules/mod_auth_openidc.so
        	DocumentRoot /var/www/protected
	
	 /* On retrouve donc le chemin pour le chargement du module que nous avons compilé précédemment et le chemin du fichier index.html de protected aussi crée précédemment. C'est donc la page /var/www/protected/index.html qui sera la page chargée lors du lancement de notre serveur https */

	* Le certificat et la clé privée
	IMPORTANT: par défaut apache crée un certificat et une clé privée dont le Common Name n'est pas localhost. Il faut donc en créer un avec comme Common Name localhost. Le nom w.crt et w.key sont arbitraires.
	 - Créer un certificat et une clé privée (Voir google comment faire) ou entrez dans openssl et tapez:
		> req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout w.key -out w.crt

	- A la création un ensemble de paramètres sera demandé. Rentrez au choix voulu sauf le Common Name qui doit être celui du serveur https. Ici ça sera localhost comme déclaré dans ServerName.

	 - Copier le certificat w.crt dans /etc/ssl/certs
	 - Copier la clé privée w.key dans /etc/ssl/private

	- Modifier les paramètres de certificats comme suit:
	 SSLCertificateFile      /etc/ssl/certs/w.crt
         SSLCertificateKeyFile /etc/ssl/private/w.key

11- Paramètrage du module auth_openidc_module

	* Juste AVANT la fin de la fermeture de la balise </VirtualHost> renseignez ces paramètres:

	OIDCCryptoPassphrase AEZTERYUDIIIIICCs
 	OIDCProviderMetadataURL https://auth.bas.esw.esante.gouv.fr/auth/realms/esante-wallet/.well-known/wallet-openid-configuration
 	OIDCResponseType code
 	OIDCScope "openid scope_all"
 	OIDCClientID wraptor-msspro
 	OIDCClientSecret fe1222f3-8926-4fb8-b24c-6e5b5e2d9bb8
 	OIDCRedirectURI https://localhost/openid/redirect_url
	OIDCAuthRequestParams acr_values=eidas1
	OIDCRemoteUserClaim sub
	OIDCInfoHook iat access_token access_token_expires id_token userinfo refresh_token session
	OIDCPassClaimsAs both
	OIDCPassIDTokenAs claims  serialized
	OIDCPassRefreshToken On

	<Location "/openid">
	    AuthType openid-connect
	    Require valid-user
	    RequestHeader set Authorization "Bearer %{OIDC_access_token}e"
	    ProxyPass  http://localhost:28080/openid
	    ProxyPassReverse  http://localhost:28080/openid
	</Location>



		* Enregister le fichier 

		* Activer la nouvelle configuration. Taper:
		 > sudo sudo a2ensite openid-ssl.conf

		* Activer les variables d'environnement Apache
		 > source /etc/apache2/envvars
		
		Ajoutez à la fin du fichier /etc/apache2/apache2.conf le parametre suivant: ServerName localhost
		
		
		* Enregistrer les modifications et sortez du fichier.
		
		

12- Installation libapache2-mod-jk pour la redirection vers Jeebop/tomcat


	* Enregistrer les modifications et sortez du fichier.

	* Installation du module. Dans la console tapez:
	 > sudo apt-get install libapache2-mod-jk
	
	* Activation des mods nécéssaires. Dans la console tapez: 
	 > sudo a2enmod  headers
	 > sudo a2enmod  proxy
	 > sudo a2enmod proxy_http

	

	* LE PACKAGE PACKAGE libapache2-mod-jk
	  - Le package libapache2-mod-jk qui a été installé est mal configuré avec apache2 pour une question de compatibilité avec httpd. Il manque le fichier jk.conf qui se charge de la configuration du module. A la place nous avons un ficher httpd-jk.conf. Donc nous allons faire une copie du fichier et activer le module jk.
	   
	* Dans le repertoire /etc/apache2/mods-available/ dans la console tapez:
	 > sudo cp httpd-jk.conf jk.conf

	* Ensuite activer le module jk dans la console tapez:
	 > sudo a2enmod jk

	* Le module est activé et le lien symbolique a été crée dans /etc/apache2/mods-enabled.
	  Redemarrez apache. Pour cela dans la console tapez:
	 > sudo service apache2 restart

ASTUCE: Pour tester la syntaxe de la configaurtion d'un serveur apache tapez :sudo apachectl configtest

Le service fonctionne.
